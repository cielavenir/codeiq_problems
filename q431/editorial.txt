問題のポイントは以下の2点になります。
・数値リテラルおよび文字列リテラルが禁止されている状況でどのようにして数値を手に入れるか
・手に入れた数値を演算して目的の値として出力する

2点目については、数値1を手に入れることさえ出来れば、加算により目的の文字コードを手に入れてから、
char型として出力するかあるいはchr()を用いて文字列に変換すれば良いということになります。
例外はPerlで、少なくとも5.12以降は、use bytes;しないとchr()で得られた文字列をprintすることができないようです。

加算を行いやすいのは1なので、1点目については1を得る方法を解説します。
まず、log(E)を使う方法があります。これはJavaだと
(int)Math.log(Math.E)
で実現できます。
C/C++だと
(int)log(M_E)
と書けますが、C/C++ではM_Eは定数ではなくマクロなので、厳密には規約違反となります
(@kunio_Yb様よりご指摘いただきました。ありがとうございます)。

もしくは言語仕様を利用する方法で、これは言語ごとにやり方が異なります。
・C/C++
初期化式を持たないグローバル変数はbssセクションに置かれます。main()が実行されるより前に0で初期化されるので、その変数をインクリメントすれば1になります。
もしくは、sizeof(char)は1です。
・C#
System.Convert.ToInt32(true)により1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。
(new int[]{}).Length.ToString().Length
・Java
static変数は0に初期化されるので、その変数をインクリメントすれば1が得られます。
もしくはjava.math.BigInteger.ONE.toString()を整数に変換すると1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。
String.valueOf((new int[]{}).length).length()
・JavaScript
varにより宣言された変数はundefinedになります。インクリメントするとNaNになってしまいますが、「-~」によりインクリメントすれば1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。
[].length.toString().length
・Perl
myにより宣言された変数はundefとなるので、それをインクリメントすることで1が得られます。
また、「空配列の長さの否定」も1になります。
@a=();!scalar(@a); # => 1
・PHP
真と判定される組み込み変数(出題者は$GLOBALSを使いました)の二重否定(!!)を取ることで1が得られます。
また、「空配列の長さの否定」も1になります。
!count(array())
・Python
Trueを文字列に変換し、そのイテレータの先頭の要素をord()することでTの文字コードである0x54が得られます(変数tに代入)。Pythonは++演算子がありませんが、-~によるインクリメントは行えるので、-~t-tにより1が得られます。
また、「空配列の長さを表す文字列の長さ」やTrueのint変換も1になります。
len(str(len([])))
int(True)
・Ruby
trueを文字列に変換し、bytes.to_aにより文字コードの配列を得て、その先頭を取り出すことでtの文字コードである0x74が得られます(変数tに代入)。Rubyは++演算子がありませんが、-~によるインクリメントは行えるので、-~t-tにより1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。
[].size.to_s.size

また、別解として、Perl/PHPのBarewordを活用する方法や、「Hello/Worldクラスのクラス名」などを使う方法もあります。
ただしこの場合も空白を挿入するのには工夫が必要となります(今回はSHA256の長さを使ってみました)。
