2013年8月19日〜2013年9月19日の期間、数値・文字・文字列リテラルを使わずにHello Worldを出力する問題を出題しました。
当初は1ヶ月で50人行かない予想でしたが、10倍を越える542人の方が挑戦して下さいました。
CodeIQ史上2番目に多い(事務局問題以外では最多)挑戦者数となりました。
皆様誠にありがとうございます。
Hello Worldという極めて簡単 **に見える** 題材を扱ったことと、対応言語の多さが功を奏したのかなと思います。

「実行結果のみを評価する」問題であれば、別のサイトでも出題できますので、今回は「その結果が得られた過程を評価する」形式としました。
その結果、自動採点することができず、採点がかなり大変なことになりました。次回はその辺ももう少し練りたいです。

## 問題文

>標準出力に
>Hello World
>と出力するプログラムを作成して下さい。

>ただし、数値、文字及び文字列リテラルを解答に含めることはできません。
>Perlのqqやqw、Rubyの%Q、%q、%wなども避けたほうが評価が高くなります。
>言語仕様をフル活用して下さい！

>プログラミング言語は
>>AppleScript(osascript)/C/C++/C#/Clojure/D/Erlang/Fortran/Go/Groovy/Haskell/
>>Hello Algorithm/HSP/Java/JavaScript(Node.js)/Kuin/Lisp/Lua/OCaml/Pascal/
>>Perl/PHP/Pike/Python/R/Ruby/Scala/Scheme/Smalltalk/VB.Net

>のいずれかを使用して下さい。

### 言語の追加履歴です。
* 8/19 C/C++/C#/Java/JavaScript(Node.js)/Perl/PHP/Python/Ruby (9言語)
* 8/27 D/R/Scala/VB.Net (4)
* 8/28 Hello Algorithm (1)
* 8/29 Pascal/Fortran (2)
* 9/1  Go/HSP (2)
* 9/6  Clojure/Lisp/Scheme (3)
* 9/9  Groovy/Lua (2)
* 9/11 Haskell/OCaml (2)
* 9/14 AppleScript/Erlang/Kuin/Pike/Smalltalk (5)

AppleScript/Erlang/Hello Algorithm/Go/Lua/Pikeの挑戦者数は0、
Kuin/OCaml/VB.Netが1名、Fortran/HSPが2名、Groovy/Pascal/Smalltalkが若干名、
残り16言語が9割以上でした。
関数型言語は解答作成がそれなりに大変でしたが、追加した甲斐がありました。

## 想定解法
問題のポイントは以下の2点になります。

* 数値リテラルおよび文字列リテラルが禁止されている状況でどのようにして数値を手に入れるか
* 手に入れた数値を演算して目的の値として出力する

2点目については、数値1を手に入れることさえ出来れば、加算により目的の文字コードを手に入れてから、char型として出力するかあるいはchr()を用いて文字列に変換すれば良いということになります。
例外はPerlで、少なくとも5.12以降は、use bytes;しないとchr()で得られた文字列をprintすることができないようです。

加算を行いやすいのは1なので、1点目については1を得る方法を解説します。
まず、log(E)を使う方法があります。これはJavaだと

~~~java
(int)Math.log(Math.E)
~~~

で実現できます。
C/C++だと

~~~cpp
(int)log(M_E)
~~~

と書けますが、C/C++ではM_Eは定数ではなくマクロなので、厳密には規約違反となります(@kunio_Yb様よりご指摘いただきました。ありがとうございます)。

もしくは言語仕様を利用する方法で、これは言語ごとにやり方が異なります。

### C/C++

初期化式を持たないグローバル変数はbssセクションに置かれます。main()が実行されるより前に0で初期化されるので、その変数をインクリメントすれば1になります。
もしくは、少なくともx86/x64のgcc/clang上では、sizeof(char)は1です。

### D
グローバル変数は0で初期化されるので、その変数をインクリメントすれば1になります。

### C\#
System.Convert.ToInt32(true)により1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。

~~~csharp
(new int[]{}).Length.ToString().Length
~~~

### Java
static変数は0に初期化されるので、その変数をインクリメントすれば1が得られます。
もしくはjava.math.BigInteger.ONE.toString()を整数に変換すると1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。

~~~java
String.valueOf((new int[]{}).length).length()
~~~

### JavaScript
varにより宣言された変数はundefinedになります。インクリメントするとNaNになってしまいますが、「-~」によりインクリメントすれば1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。

~~~javascript
[].length.toString().length
~~~

### Perl
myにより宣言された変数はundefとなるので、それをインクリメントすることで1が得られます。
また、「空配列の長さの否定」も1になります。

~~~perl
@a=();!scalar(@a); # => 1
~~~

### PHP
真と判定される組み込み変数(出題者は$GLOBALSを使いました)の二重否定(!!)を取ることで1が得られます。
また、「空配列の長さの否定」も1になります。

~~~php
!count(array())
~~~

### Python
Trueを文字列に変換し、そのイテレータの先頭の要素をord()することでTの文字コードである0x54が得られます(変数tに代入)。Pythonは++演算子がありませんが、-~によるインクリメントは行えるので、-~t-tにより1が得られます。
また、「空配列の長さを表す文字列の長さ」やTrueのint変換も1になります。

~~~python
len(str(len([])))
int(True)
~~~

### Ruby
trueを文字列に変換し、bytes.to_aにより文字コードの配列を得て、その先頭を取り出すことでtの文字コードである0x74が得られます(変数tに代入)。Rubyは++演算子がありませんが、-~によるインクリメントは行えるので、-~t-tにより1が得られます。
また、「空配列の長さを表す文字列の長さ」も1になります。

~~~ruby
[].size.to_s.size
~~~

### R
length(c(TRUE))は1となります。

### VB.Net
「空配列の長さを表す文字列の長さ」は1になります。

~~~vb
(new integer(){}).Length.ToString().Length
~~~

これらの解答は
<https://github.com/cielavenir/codeiq_problems/tree/master/q431>
にて公開しています。
8/28以降に追加した17言語については、恐れ入りますが解答例にてご確認下さい。ほとんどがtrueの配列の長さを用いた解答になっています。
一点のみ、Fortranについては、今回文字列リテラルが使えないことから、出力を合わせるためには、 **print文のフォーマットをchar()から作成する** 必要がありました。このため難易度が若干上がってしまいました。

他の言語で想定解法が使えるかどうかの保証がなかったのと、Brainfuckなどの低級言語では普通にHello Worldを書いただけで問題の仕様を満たしてしまうので、今回は言語指定とさせて頂きました。
保証がないだけなので、本当は言語不問でも良かったのですが、もし他の言語で提出したかった方がいましたらごめんなさい。

Rは計算機プログラミングには余り使われませんが、全く使われないかというとそうではありません。
print()を使うと整形された出力になりますが、cat()は整形を行わないので、要求されたフォーマットで出力するのに使うことができます。

当初は1ヶ月で50人行かない予想でしたが、3日で30人を突破し、少しびっくりしました。
皆様の解答を見ていますと、Perl/PHPのBarewordを活用した解答や、「Hello/Worldクラスのクラス名」などを使う解答が意外と多いことに気が付きました。そこで、これらは別解として認めることにしました(評価5)。
ただしこの場合でも空白の出力は工夫が必要です。その工夫が今ひとつだった解答は次点ということで評価4とさせて頂きました。
一方、

* PHPのタグ外にHello Worldと記述する
* DATAファイルハンドルを使う
* 正規表現リテラル/Hello World/から直接答えを得る(/ /だけなら場合により許容)
* ファイル名をHello Worldとする
以上の解答は _余りに安直すぎる_ と思われたので、評価3とさせて頂きました。評価基準がはっきりせず申し訳ありません。
なお、
* 出力する文字コードを数値リテラルを用いて埋め込む
* 外部と通信して答えを得る
* 外部ファイルを読み込む
以上の解答は評価1とさせて頂きました。頑張っていただいたのですが、そのやりとりにリテラルが使われていることに変わりはありませんから。

実はこの問題は、当初は次のような問題でした。
>[Ruby] 文字列が2つ与えられるので、それらが等しいかどうか判定し、等しいならTrue、等しくないならFalseを出力して下さい。
>解答
>`puts (gets.chomp==gets.chomp).to_s.capitalize`

ところが、これができるなら少し応用すれば任意の文字が出力できるのではないかと考えました。であれば基本のきであるHello Worldにしたらどうかと思い、整形したのがこの問題になります。
想定解法が少なかったのは、問題を作った時にはあったこの過程が挑戦者にはないからだと思いました。
大体、評価5が50%、4が20%、3が20%、1が10%の分布になったので、やはり「数値リテラルを使わずに1を変数に代入する」といった誘導を付けるべきだったと反省しています。

ところで、C/C++の解答で末尾にreturn 0;と書かれたもの、および改行を出力し忘れている解答が多数ありました。特に改行については問題文で明示がなかったことも有り、今回はおまけいたしました。

Unixでは、1行目が#!で始まる場合、3文字目以降を実行ファイルのパスとして、そのスクリプトを実行する仕組みが存在します。これをShebangといいます。
出題当初は、RubyやPythonは1行目に「ruby」や「python」を含む、という指示の書き方をしていました。これは、例えばruby2.0やpython3.3など、バージョンを書けるようにするためだったのですが、ごく一部、(「ruby」や「python」の後ろに)バージョン以外の文字列を書き込んだ方がいらっしゃいました。尤も今回は言語を識別できれば十分なので、この点については無視して採点いたしました。

おもしろかった解答をいくつか方法のみ紹介します。

* JavaやC#には様々なクラスが存在する
  * そのクラス名の一部を取得する
  * 様々な定数値を組み合わせる
* 例外を捕捉し、メッセージを切り取る
* JavaScriptの関数に/*Hello World*/なるコメントを挿入しておき、それをtoStringした結果から取得する
* クラスのフィールド一覧を使う
* 数学関数を駆使して目的の文字コードを得る
* (スクリプト言語において)自分自身を読み込み、
  * 各行の長さから文字コードを得る(改行コードに注意が必要です)
  * コメントとして挿入しておいたHello Worldを読み込む
  * コード中にうまくHello Worldを埋め込み、行末の空白の長さで取得する文字のインデックスを指定する
* Rubyのmethod_missingやconst_missingを使う
  * Hello/Worldメソッド、クラスを呼び出す
  * メソッド名を1文字ずつ分割して、文字の出現頻度を数える
     * Hashを取り出す順序に依存するのでRuby 1.9+用
* "Hello World\n"をBase64エンコードすると"SGVsbG8gV29ybGQK"となることを利用し、method_missing内で展開する
* 構造体のsizeofから文字コードを得る
* 行番号から文字コードを得る
* 12文字からなるクラスを2つ用意し、そのクラス名を1文字ずつxorする
* Cの__FUNCTION__を使う
* enumの初期化子を活用する(enum{zero, one, two, sp=two&lt;&lt;two&lt;&lt;two})
* 配列を文字列化して、[と,と]を削る

* 線形合同法を使う乱数生成器に適切なシードを入れて、その出力を変換する
* Node.jsのエラーは当該行を全て出力することを利用し、制御文字を埋め込んでおく
  * ターミナルを終了するしかなくなりました。ありがとうございます。
* Rのsubstitute()を使う
* Cの#マクロを使う
* Rubyの%s!...!を使う
  * うまく引用符を回避した解答でした。いや、単に私が気づかなかっただけですが…。

PS.
ideoneにはBrainfuckの他、WhiteSpaceなど他の低級言語も登録されているので、今回「ideoneで使える言語」という縛りができませんでした。
そのため対応言語を要望に応じて後から増やす形となってしまい、運営さんには数日ごとに大変ご迷惑をお掛けしました。この場をお借りしてお詫び申し上げます。
\# 人数増えると思っていなかったので、95%カバーしとけばいいやとたかをくくっておりました--;
